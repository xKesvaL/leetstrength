/* eslint-disable */
/** 
 * This file was generated by 'vite-plugin-kit-routes'
 * 
 *      >> DO NOT EDIT THIS FILE MANUALLY <<
 */

/**
 * PAGES
 */
const PAGES = {
  "/": (sp?: Record<string, string | number>) => {
    return `/${appendSp(sp)}`
  },
  "/admin": (sp?: Record<string, string | number>) => {
    return `/admin${appendSp(sp)}`
  },
  "/admin/users": (sp?: Record<string, string | number>) => {
    return `/admin/users${appendSp(sp)}`
  },
  "/nutrition": (sp?: Record<string, string | number>) => {
    return `/nutrition${appendSp(sp)}`
  },
  "/nutrition/log": (sp?: Record<string, string | number>) => {
    return `/nutrition/log${appendSp(sp)}`
  },
  "/profile": (sp?: Record<string, string | number>) => {
    return `/profile${appendSp(sp)}`
  },
  "/profile/[username]": (params: { username: (string | number) }, sp?: Record<string, string | number>) => {
    return `/profile/${params.username}${appendSp(sp)}`
  },
  "/profile/calendar": (sp?: Record<string, string | number>) => {
    return `/profile/calendar${appendSp(sp)}`
  },
  "/profile/exercises": (sp?: Record<string, string | number>) => {
    return `/profile/exercises${appendSp(sp)}`
  },
  "/profile/measures": (sp?: Record<string, string | number>) => {
    return `/profile/measures${appendSp(sp)}`
  },
  "/profile/settings": (sp?: Record<string, string | number>) => {
    return `/profile/settings${appendSp(sp)}`
  },
  "/profile/settings/account": (sp?: Record<string, string | number>) => {
    return `/profile/settings/account${appendSp(sp)}`
  },
  "/profile/settings/app": (sp?: Record<string, string | number>) => {
    return `/profile/settings/app${appendSp(sp)}`
  },
  "/profile/settings/connections": (sp?: Record<string, string | number>) => {
    return `/profile/settings/connections${appendSp(sp)}`
  },
  "/profile/settings/contact": (sp?: Record<string, string | number>) => {
    return `/profile/settings/contact${appendSp(sp)}`
  },
  "/profile/settings/language": (sp?: Record<string, string | number>) => {
    return `/profile/settings/language${appendSp(sp)}`
  },
  "/profile/settings/legal": (sp?: Record<string, string | number>) => {
    return `/profile/settings/legal${appendSp(sp)}`
  },
  "/profile/settings/notifications": (sp?: Record<string, string | number>) => {
    return `/profile/settings/notifications${appendSp(sp)}`
  },
  "/profile/settings/profile": (sp?: Record<string, string | number>) => {
    return `/profile/settings/profile${appendSp(sp)}`
  },
  "/profile/settings/q-and-a": (sp?: Record<string, string | number>) => {
    return `/profile/settings/q-and-a${appendSp(sp)}`
  },
  "/profile/settings/theme": (sp?: Record<string, string | number>) => {
    return `/profile/settings/theme${appendSp(sp)}`
  },
  "/profile/settings/units": (sp?: Record<string, string | number>) => {
    return `/profile/settings/units${appendSp(sp)}`
  },
  "/profile/settings/workouts": (sp?: Record<string, string | number>) => {
    return `/profile/settings/workouts${appendSp(sp)}`
  },
  "/profile/statistics": (sp?: Record<string, string | number>) => {
    return `/profile/statistics${appendSp(sp)}`
  },
  "/programs": (sp?: Record<string, string | number>) => {
    return `/programs${appendSp(sp)}`
  },
  "/programs/community": (sp?: Record<string, string | number>) => {
    return `/programs/community${appendSp(sp)}`
  },
  "/programs/self": (sp?: Record<string, string | number>) => {
    return `/programs/self${appendSp(sp)}`
  },
  "/train": (sp?: Record<string, string | number>) => {
    return `/train${appendSp(sp)}`
  },
  "/train/log": (sp?: Record<string, string | number>) => {
    return `/train/log${appendSp(sp)}`
  },
  "/train/log/add-exercises": (sp?: Record<string, string | number>) => {
    return `/train/log/add-exercises${appendSp(sp)}`
  },
  "/auth": (sp?: Record<string, string | number>) => {
    return `/auth${appendSp(sp)}`
  },
  "/auth/forgot-password": (sp?: Record<string, string | number>) => {
    return `/auth/forgot-password${appendSp(sp)}`
  },
  "/auth/login": (sp?: Record<string, string | number>) => {
    return `/auth/login${appendSp(sp)}`
  },
  "/auth/re-auth": (sp?: Record<string, string | number>) => {
    return `/auth/re-auth${appendSp(sp)}`
  },
  "/auth/register": (sp?: Record<string, string | number>) => {
    return `/auth/register${appendSp(sp)}`
  }
}

/**
 * SERVERS
 */
const SERVERS = {
  "GET /manifest.webmanifest": (sp?: Record<string, string | number>) => {
    return `/manifest.webmanifest${appendSp(sp)}`
  },
  "GET /sitemap.xml": (sp?: Record<string, string | number>) => {
    return `/sitemap.xml${appendSp(sp)}`
  }
}

/**
 * ACTIONS
 */
const ACTIONS = {
  
}

/**
 * LINKS
 */
const LINKS = {
  
}

/**
 * Append search params to a string
 */
const appendSp = (sp?: Record<string, string | number | undefined>, prefix: '?' | '&' = '?') => {
  if (sp === undefined) return ''
  const mapping = Object.entries(sp)
    .filter(c => c[1] !== undefined)
    .map(c => [c[0], String(c[1])])

  const formated = new URLSearchParams(mapping).toString()
  if (formated) {
    return `${prefix}${formated}`
  }
  return ''
}

/**
 * get the current search params
 * 
 * Could be use like this:
 * ```
 * route("/cities", { page: 2 }, { ...currentSP() })
 * ```
 */ 
export const currentSp = () => {
  const params = new URLSearchParams(window.location.search)
  const record: Record<string, string> = {}
  for (const [key, value] of params.entries()) {
    record[key] = value
  }
  return record
}

// route function helpers
type NonFunctionKeys<T> = { [K in keyof T]: T[K] extends Function ? never : K }[keyof T]
type FunctionKeys<T> = { [K in keyof T]: T[K] extends Function ? K : never }[keyof T]
type FunctionParams<T> = T extends (...args: infer P) => any ? P : never

const AllObjs = { ...PAGES, ...ACTIONS, ...SERVERS, ...LINKS }
type AllTypes = typeof AllObjs

/**
 * To be used like this: 
 * ```ts
 * import { route } from './ROUTES'
 * 
 * route('site_id', { id: 1 })
 * ```
 */
export function route<T extends FunctionKeys<AllTypes>>(key: T, ...params: FunctionParams<AllTypes[T]>): string
export function route<T extends NonFunctionKeys<AllTypes>>(key: T): string
export function route<T extends keyof AllTypes>(key: T, ...params: any[]): string {
  if (AllObjs[key] as any instanceof Function) {
    const element = (AllObjs as any)[key] as (...args: any[]) => string
    return element(...params)
  } else {
    return AllObjs[key] as string
  }
}

/**
* Add this type as a generic of the vite plugin `kitRoutes<KIT_ROUTES>`.
* 
* Full example:
* ```ts
* import type { KIT_ROUTES } from './ROUTES'
* import { kitRoutes } from 'vite-plugin-kit-routes'
* 
* kitRoutes<KIT_ROUTES>({
*  PAGES: {
*    // here, key of object will be typed!
*  }
* })
* ```
*/
export type KIT_ROUTES = { 
  PAGES: { '/': never, '/admin': never, '/admin/users': never, '/nutrition': never, '/nutrition/log': never, '/profile': never, '/profile/[username]': 'username', '/profile/calendar': never, '/profile/exercises': never, '/profile/measures': never, '/profile/settings': never, '/profile/settings/account': never, '/profile/settings/app': never, '/profile/settings/connections': never, '/profile/settings/contact': never, '/profile/settings/language': never, '/profile/settings/legal': never, '/profile/settings/notifications': never, '/profile/settings/profile': never, '/profile/settings/q-and-a': never, '/profile/settings/theme': never, '/profile/settings/units': never, '/profile/settings/workouts': never, '/profile/statistics': never, '/programs': never, '/programs/community': never, '/programs/self': never, '/train': never, '/train/log': never, '/train/log/add-exercises': never, '/auth': never, '/auth/forgot-password': never, '/auth/login': never, '/auth/re-auth': never, '/auth/register': never }
  SERVERS: { 'GET /manifest.webmanifest': never, 'GET /sitemap.xml': never }
  ACTIONS: Record<string, never>
  LINKS: Record<string, never>
  Params: { username: never }
}
